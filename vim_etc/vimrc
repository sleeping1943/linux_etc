if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif

set nocompatible	" Use Vim defaults (much better!)
set bs=indent,eol,start		" allow backspacing over everything in insert mode
"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  " autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

filetype plugin on

if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"
"鼠标可用"
set mouse=a
"自动对齐"
set ai 
"显示行号"
set nu
"tab键=4个空格"
set ts=4
set expandtab
"显示所在行的行号和列号"
set ruler
set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
" 命令行（在状态行下）的高度，默认为1，这里是2 "
 set cmdheight=2 
"使回格键可用"
set backspace=2
"设置注释为绿色 ctermbg(注释背景色) ctermfg(注释前景色)
"cterm(彩色终端,bold,加粗,underline,下划线)"
highlight Comment ctermfg=green guifg=green 
"高亮当前行，深灰背景色，前景色白色"
set cursorline
hi CursorLine  cterm=NONE   ctermbg=darkgray ctermfg=lightblue
set cursorcolumn
hi CursorColumn cterm=NONE ctermbg=darkgray ctermfg=lightblue
"高亮匹配的字符，蓝底灰字"
hi Search term=standout ctermfg=darkgray ctermbg=lightblue
"相对行的位置"
set relativenumber


"<F8>打开/关闭目录树边框(左)"
map <F8> :call Echo()<CR>
func! Echo()
    :echo  "****************************************************************************************************"
    :echo  "                                                        菜单显示                                     "
    :echo  "                                                <F1>打开终端帮助手册                                 "
    :echo  "                                                <F2>打开/关闭目录树边框(左)                          "
    :echo  "                                                <F3>打开新的标签页                                   "
    :echo  "                                                <F4>关闭当前标签页                                   "
    :echo  "                                                <F5>TabbarToggle开启、关闭，边框(右)                        "
    :echo  "                                                <F6>新建makefile模板                                 "
    :echo  "                                                <F7>新建文件头模板(.sh/.h/.c/.cc/.cpp/makefile)      "
    :echo  "                                                <F8>开启本提示手册                                   "
    :echo  "                                                <F9>开启/取消匹配高亮                                "
    :echo  "                                                <F10>选中终端菜单                                    "
    :echo  "                                                <F11>设置/取消全屏                                   "
    :echo  "                                                <F12> 切换.h/.cpp                                    "
    :echo  "                                                ,td 开启任务列表                                     "
    :echo  "****************************************************************************************************"
endfunc
"<F2>打开/关闭目录树边框(左)"
map <F2> :NERDTreeToggle<CR>
"<F3>打开新的标签页"
map <F3> :tabedit<CR>
"<F4>关闭当前标签页"
map <F4> :close<CR>
"<F5>打开tagbar"
map <F5> :TagbarToggle<CR>
"<F6>新建makefile模板"
map <F6> :call Buildmkfile()<CR> 
"<F10>Tlist开启、关闭，边框(右)"
map <F10> :TlistToggle<CR> 
func! Buildmkfile()
    call setline (1,"out?=$(PWD)")
    call append(line("."),"CXX:=g++")
    call append(line(".")+1,"target:=")
    call append(line(".")+2,"suffix:=")
    call append(line(".")+3,"cpps:=$(wildcard ./src/*.cpp)")
    call append(line(".")+4,"hpps:=$(wildcard ./src/*.hpp)")
    call append(line(".")+5,"objs:=$(cpps:%.cpp=%.o)")
    call append(line(".")+6,"CFLGAS:= -c -o ")
    call append(line(".")+7,"LDFLAGS:= -o")
    call append(line(".")+8,"ERR:=") 
    call append(line(".")+9,"")


    call append(line(".")+10,"ifeq ($(cpps),)")
    call append(line(".")+11,"\tERR:=$(error $(shell echo -e \"\\033[31mno cpp files are found!\\033[m\"))")
    call append(line(".")+12,"endif")

    call append(line(".")+13,"")
    call append(line(".")+14,"ifeq ($(dbg),1)")
	call append(line(".")+15,"\tsuffix:=_debug")
	call append(line(".")+16,"\ttarget:=$(target)$(suffix)")
	call append(line(".")+17,"\tCFLGAS:= -c -g -o  ")
	call append(line(".")+18,"\tLDFLAGS:= -g -o ")
    call append(line(".")+19,"else")
	call append(line(".")+20,"\tsuffix:=")
	call append(line(".")+21,"\ttarget:=$(target)$(suffix)")
	call append(line(".")+22,"\tCFLGAS:= -c -o ")
	call append(line(".")+23,"\tLDFLAGS:= -o ")
    call append(line(".")+24,"endif")
    call append(line(".")+25,"")

    call append(line(".")+26,".PHONY: show")
    call append(line(".")+27,"")

    call append(line(".")+28,"$(out)/$(target):$(objs)")
	call append(line(".")+29,"\t$(CXX) $(LDFLAGS) $@ $^ -lslp_utils ")
    call append(line(".")+30,"")

    call append(line(".")+31,"$(objs):%.o:%.cpp $(ERR)")
	call append(line(".")+32,"\t$(CXX) $(CFLGAS)$@ $< -std=c++11")
    call append(line(".")+33,"")

    call append(line(".")+34,"test:$(target)")
	call append(line(".")+35,"\t@echo -e \"\\033[32m执行$(out)/$^\\033[m\"")
	call append(line(".")+36,"\t@$(out)/$^")
    call append(line(".")+37,"")

    call append(line(".")+38,"show:")
	call append(line(".")+39,"\t@echo -e \"\\033[32mout=$(out)\"")
	call append(line(".")+40,"\t@echo target=$(target)")
	call append(line(".")+41,"\t@echo suffix=$(suffix)")
	call append(line(".")+42,"\t@echo cpps=$(cpps)")
	call append(line(".")+43,"\t@echo objs=$(objs)")
	call append(line(".")+44,"\t@echo CFLGAS=$(CFLGAS)")
	call append(line(".")+45,"\t@echo -e \"LDFLAGS=$(LDFLAGS)\\033[m\"")
    call append(line(".")+46,"")

    call append(line(".")+47,"clean:")
	call append(line(".")+48,"\t@echo -e \"\\033[31m清除$(target)\\033[m\"")
	call append(line(".")+49,"\t@$(RM)  $(target)")
	call append(line(".")+50,"\t@echo -e \"\\033[31m清除$(objs)\\033[m\"")
	call append(line(".")+51,"\t@$(RM)  $(objs)")
    call append(line(".")+52,"")
endfunc
"
"<F7>新建文件头模板(.sh/.h/.c/.cc/.cpp/makefile)"
map <F7> :call Buildheader()<CR> 
func! Buildheader()
    if &filetype == 'sh'
        call setline(1,"#!/bin/bash")
        call append(line("."),"#")
        call append(line(".")+1,"#此脚本")
        call append(line(".")+2,"#filename : ".expand("%"))
        call append(line(".")+3,"#author   : sleeping")
        call append(line(".")+4,"#email    : csleeping@163.com")
        call append(line(".")+5,"#date     : ".strftime("%c"))
        call append(line(".")+6,"#")
        call append(line(".")+7,"#")
    elseif expand("%:e") == 'cpp'
        call setline(1,"/************************************")
        call append(line("."),"*")
        call append(line(".")+1,"*此源文件")
        call append(line(".")+2,"*filename : ".expand("%"))
        call append(line(".")+3,"*author   : sleeping")
        call append(line(".")+4,"*email    : csleeping@163.com")
        call append(line(".")+5,"*date     : ".strftime("%c"))
        call append(line(".")+6,"*")
        call append(line(".")+7,"************************************/")
        call append(line(".")+8,"")
        if expand("%:r") == "main"
            call append(line(".")+9,"int main(int argc,char** argv) {")
            call append(line(".")+10,"")
            call append(line(".")+11,"\treturn 0;")
            call append(line(".")+12,"}")
        endif
    elseif &filetype == 'c' || expand("%:e") == 'cc'
        call setline(1,"/************************************")
        call append(line("."),"*")
        call append(line(".")+1,"*此源文件")
        call append(line(".")+2,"*filename : ".expand("%"))
        call append(line(".")+3,"*author   : sleeping")
        call append(line(".")+4,"*email    : csleeping@163.com")
        call append(line(".")+5,"*date     : ".strftime("%c"))
        call append(line(".")+6,"*")
        call append(line(".")+7,"************************************/")
        call append(line(".")+8,"")
        if expand("%:r") == "main"
            call append(line(".")+9,"int main(int argc,char** argv) {")
            call append(line(".")+10,"")
            call append(line(".")+11,"\treturn 0;")
            call append(line(".")+12,"}")
        endif
    elseif expand("%:e") == 'h'
        call setline(1,"/************************************")
        call append(line("."),"*")
        call append(line(".")+1,"*此头文件...")
        call append(line(".")+2,"*filename : ".expand("%"))
        call append(line(".")+3,"*author   : sleeping")
        call append(line(".")+4,"*email    : csleeping@163.com")
        call append(line(".")+5,"*date     : ".strftime("%c"))
        call append(line(".")+6,"*")
        call append(line(".")+7,"************************************/")
        call append(line(".")+8,"#ifndef _SLP_".toupper(expand("%:r"))."_H")
        call append(line(".")+9,"#define _SLP_".toupper(expand("%:r"))."_H")
        call append(line(".")+10,"")
        call append(line(".")+11,"#endif /*_SLP_".toupper(expand("%:r"))."_H*/")
    elseif expand("%") == 'makefile'
        call setline(1,"#")
        call append(line("."),"#")
        call append(line(".")+1,"#此头文件用于构建目标程序")
        call append(line(".")+2,"#filename : ".expand("%"))
        call append(line(".")+3,"#author   : sleeping")
        call append(line(".")+4,"#email    : csleeping@163.com")
        call append(line(".")+5,"#date     : ".strftime("%c"))
        call append(line(".")+6,"#")
        call append(line(".")+7,"#")
        call append(line(".")+8,"")

    endif
endfunc
"取消/匹配高亮"
map <F9> :set hlsearch!<CR> 
"右侧显示"
let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口

"切换.h/.cpp"
map <F12> :FSHere<CR> 
filetype off

"如果提示vundle错误，则删除现有的vundle，
"使用命令git clone https://github.com/gmarik/vundle.git
"重新下载vundle即可
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Plugin 'gmarik/vundle'
"自动补全括号"
"Plugin 'jiangmiao/auto-pairs'
"快速注释"
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'taglist.vim'
"状态栏"
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"与git集成"
Plugin 'https://github.com/tpope/vim-fugitive.git'
".h/.cpp切换"
Plugin 'derekwyatt/vim-fswitch'
"自动补全"
Plugin 'Valloric/YouCompleteMe'
"类和函数提示"
Plugin 'majutsushi/tagbar'
"多列编辑插件(会影响功能键如<F2><F3>等，方向键等)
"Plugin 'vim-multiple-cursors'
"管理TODO
Plugin 'TaskList.vim'
"doxygen注释
Plugin 'vim-scripts/DoxygenToolkit.vim'
call vundle#end()
filetype plugin indent on

" 总是显示状态行 "
set laststatus=2

"tasklist.vim任务列表插件配置
let g:tlTokenList = ["FIXME","TODO","HACK","NOTE","WARN","MODIFY"]
"绑定快捷键，默认是<Leader>t
nnoremap ,td :TaskList<CR>

"nnoremap ,hl :set hlsearch!<CR> 

highlight StatusLine guifg=SlateBlue guibg=red  
highlight StatusLineNC guifg=Gray guibg=White  
let g:airline#extensions#tabline#enable=1
"YCM补全菜单颜色
"highlight Pmenu ctermfg=lightblue ctermbg=yellow guifg=#005f87 guibg=#EEE8D5
highlight Pmenu ctermfg=cyan ctermbg=darkgray
"补全菜单选中项
"highlight PmenuSel cterm=bold,underline  ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
highlight PmenuSel ctermfg=green ctermbg=darkblue
"支持在注释中补全
let g:ycm_complete_in_comments=1
"设置自动补全插件的配置文件"
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

hi Error cterm=bold ctermfg=red ctermbg=yellow
hi WarningMsg ctermfg=red ctermbg=blue



